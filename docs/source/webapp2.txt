Aplicación web Django (parte 2)
===============================

En este documento se continuan describiendo las apps

timeSeries
----------

En esta app se define todo lo necesario para administrar series de tiempo. La siguiente figura muestra los modelos utilizados.

.. image:: _static/timeSeries.png

#ESTO DEBE SER ACTUALIZADO!!!

Cómo se observa, se define la tabla **Variable** que sirven para almacenar las variables que miden las estaciones, por ejemplo temperatura, humedad relativa, etc. Además esta tabla hereda de **FilterSearchTable** para que sea buscable por texto y categorías, es decir, cuando se busca series de tiempo, se buscan variables. 

También se define la tabla **StationType** para almacenar los tipos de estaciones que se soportan. Actualmente se soportan 2 tipos: HOBO MX2300 y BloomSKy SKY2. Las estaciones HOBO son manuales por lo que para recuperar las mediciones un operador debe extraer un archivo csv directamente de la estación, entonces ese archivo es subido a la plataforma. Las estaciones SKY2 son automáticas, ellas suben sus mediciones a la nube y mediante un API se descargan los datos y son guardados en la base de datos. Existe una relación muchos a muchos entre **StationType** y **Variable** para modelar que una estación puede medir varias variables y que una variable puede ser medida por varias estaciones.

La tabla **Station** sirve para guardar la información de una estación meteorológica. En **location** se guarda la ubicación usando un tipo de dato POINT de postgis. **SerialNum** es el numero serial de la estación, en el caso de las estaciones HOBO, en el archivo csv que se genera se encuentra el número serial y con eso se identifica a qué estación pertenecen esas mediciones. En el caso de que la estación sea automática (SKY2) en **frequency** se guarda la fecuencia con la que se piden los datos en minutos, y en **token** se guarda el token de autenticación del API para descargar los datos.

En **Measurement** se guardan las mediciones. Es un **HyperTable** de **timeScaleDB**. **timeScaleDB** es una extensión de postgis para administrar series de tiempo. Un **HyperTable** es una abtracción, internamente está formada por varias tablas normales de postgres, pero para el usuario final se comporta como una tabla normal por lo que se puede usar SQL para trabajar con un **HyperTable**. La ventaja de un **HyperTable** es que los datos se distribuyen en varias tablas por lo que las consultas son más veloces y hay menos riesgo de que la tabla se quede bloqueada.

**Measurement** tiene un primary key compuesto por un número incremental (**id_m**) y el timestamp de la medición (**ts**). En **idStation** se guarda una referencia a la estación de donde provienen los datos. En **idProvider** se guarda una referencia a **Provider**, la idea es que se pueda almacenar series de tiempo que vengan de terceros y no sólo de las estaciones meteorológicas, pero esto no está completamente desarrollado y no se ha utilizado. En **readings** se guardan las mediciones de la estación. **readings** es un JSON que tiene la siguiente estructura::

  readings:{
    id_variable_1: medicion1,
    id_variable_2: medicion2,
    id_variable_3: medicion3,
    ....
  }

En esta app hay metodos para realizar las insersiones y consultas a estas tablas. Además hay **views** que permiten a los clientes web dibujar las series de tiempo en un plot. En **RESCLIMA/timeSeries/tasks.py** se encuentra una tarea de celery que sirve para importar un archivo csv para las estaciones HOBO. En **StationScripts/Sky2/sky2.py** hay un script que se encarga de descargar los datos de las estaciones SKY2 y de guardar las mediciones en la base de la manera correcta.

Para obtener por ejemplo la **temperatura** de la estación **14** se debe filtrar la tabla **Measurements** por **idStation**, luego recuperar el id de la variable **temperatura** de la tabla Variables, recuperar del diccionario **readings** los values (mediciones) cuya clave (id variable) sea igual al id de la variable **temperatura**. Todas las consultas SQL referentes a extraer mediciones ya está implementadas.


tms
---

Esta app implementa un protocolo llamado **Tile Map Service** que sirve para dibujar mapas en la web. Este protocolo se usa para dibujar las capas raster en el cliente web. El cliente web utiliza la librería **OpenLayers** que permite crear mapas multicapas y soporta varios protocolos incluyendo TMS.

El protocolo divide el mundo en Tiles, dependiendo del nivel de zoom.
El numero de tiles es (2^(zoom))^2. Por ejemplo con zoom=2 se tendían 16 tiles. Además, como se observa en la figura cada tile tiene una coordenada (x,y).

.. image:: _static/tms1.png

En el ejemplo anterior. OpenLayers realiza automáticamente 16 peticiones al servidor TMS para obtener las 16 imagenes. El formato del url es **tms/version/id_capa/zoom/x/y.png**. A partir de ahí el servidor TMS recupera la capa y los parametros (zoom, x, y) y devuelve una imagen.


El algoritmo para generar la imagen está en **tms/renderer.py** y funciona de la siguiente manera:

1) Recupera la capa y le aplica el estilo. El resultado de esto es un numpy array de shape (filas,columnas,4), es decir una imagen RGBA. Y la resolucion del pixel de 8 bits (0-255).


2) A partir de los parámetros (zoom,x,y) se genera un bbox usando la librería **pygeotile**. Y también se recupera el bbox de la capa. Los bbox se representan como vectores de 4 elementos [minX, maxX, minY, maxY]. Se está usando la proyeccion **EPSG:3857** en el cuál los puntos de la tierra se miden en metros. El siguiente gráfico muestra el sistema de coordenadas de EPSG:3857


.. image:: _static/tms2.png

El siguiente gráfico muestra un ejemplo de los bbox del tile y de la capa

.. image:: _static/tms3.png

3) Posterior a eso, se transforman todas las coordenadas para que el origen esté en la esquina superior izquierda del planeta

.. image:: _static/tms4.png

4) Luego, se realiza una transformacion en todas las coordenadas para que el origen esté en la esquina superior izquierda de la capa.

.. image:: _static/tms5.png


5) Luego se realiza una transformación en todas las coordenadas para que ya no estén en metros sino en pixeles.

6) Se encuentra la intersección entre el bbox del tile y el de la capa y se corta esa imagen.

.. image:: _static/tms6.png

7) La imagen final que retorna el servidor tendrá tamaño (TILE_WIDTH x TILE_HEIGHT). Que son constantes almacenadas en **tms/constants.py**. Por lo que la imagen recortada es escala proporcionalmente al tamaño de la imagen final.

8) Finalmente, se debe calcular en que posicion del tile final colocar la imagen recortada. Y luego se retorna la imagen

.. image:: _static/tms7.png


vectorLayers
------------
Esta app sirve para administrar las capas vectoriales. Se define el modelo VectorLayer, mostrado a continuación,

..  list-table:: Atributos del modelo VectorLayer
    :widths: 25  75
    :header-rows: 1

    * - Atributo
      - Descripción
    * - geom_type
      - Es el tipo de geometría de la capas. Las capas vectoriales son homogéneas. Es decir, hay capas sólo de puntos, sólo de polígonos, sólo de líneas, etc.
    * - encoding
      - Es el encoding del texto de las capas.

La app permite subir, visualizar, descargar, editar y eliminar capas vectoriales.

Para subir un capa vectorial se utiliza un proceso de Celery y se realiza lo siguiente. Mediante un formulario, un usuario sube un archivo shapefile, entonces, el proceso realiza ciertas validaciones; obtiene los metadatos de Layer (abstact, title, dates, etc);  calcula el bbox de la capa; finalmente, convierte el shapefile en geojson y guarda ese archivo en el directorio definido en la variable **VECTOR_FILES_PATH** de settings.py.


Una capa vectorial es un archivo que almacena datos geográficos, definiendo geometrías usando vectores. Una capa vectorial consiste de: un sistema de coordenadas geográfico, un conjunto de Features, los cuales tienen una geometría (punto, línea, polígono, etc) que describe su forma, y una tabla con atributos no geográficos. La siguiente figura muestra un esquema de una capa vectorial. Como se observa en el esquema, una capa debe definir su sistema de coordenadas mediante un código srid o mediante texto well-known-text (WKT). Cómo se mencionó anteriormente las geometrías son homogéneas, en el esquema se muestran solo puntos. Para definir otras geometrías como polígonos o líneas se puede usar WKT. También se observa que los Features tienen atributos no geográficos asociados tales como el nombre de una provincia o el número de habitantes. 

.. image:: _static/shapefile.png

Un shapefile almacena toda esta información en 4 archivos con extensión .dbf .shp .shx .prj que describen los atributos no geográficos, los features, un indice y la proyeccion respectivamente. El proceso de subida valida el shapefile y lo transforma en geojson que es un archivo más simple y además OpenLayers acepta geojsons para dibujar una capa vectorial. Además, OpenLayers acepta SLD, de esta forma se visualizan las capas vectoriales.

Para descargar una capa, se convierte a shapefile nuevamente y se lo envía al usuario.
