# -*- encoding: utf-8 -*-
import datetime
import os 
import tempfile
from tasks import import_vector_layer

# pendiente estilos
def import_data(request):
	# objeto con el resultado de la operacion
	result = {}

	# se obtienen las variables del POST
	list_files = request.FILES.getlist('import_files')
	encoding  = request.POST['encoding']
	title = request.POST["title"]
	abstract = request.POST["abstract"]
	dat_str = request.POST["data_date"]
	# se convierte el string de la fecha en un objeto
	# datetime
	data_date = datetime.datetime.strptime(date_str, '%Y-%m-%d')
	# se verifica que esten todos los archivos requeridos
	required_suffixes = [".shp", ".shx", ".dbf", ".prj"]
	has_suffix = {}
	for suffix in required_suffixes:
		has_suffix[suffix] = False

	for f in list_files:
		extension = os.path.splitext(f.name)[1].lower()
		if extension in required_suffixes:
			has_suffix[extension] = True

	for suffix in required_suffixes:
		if not has_suffix[suffix]:
			result["error"] = "Archivo perdido requerido ."+suffix
			return result

	# se guardan los archivos en una carpeta temporal
	temp_dir = tempfile.mkdtemp()
	vectorlayer_name = None # nombre del archivo shapefile
	
	for f in list_files:
		# si la extencion  del archivo es shp
		# este sera el nombre del archivo
		if f.name.endswith(".shp"):
			vectorlayer_name = f.name

		# se guarda el archivo en la carpeta temporal
		file_dir = os.path.join(temp_dir,f.name)
		f = open(file_dir, 'wb+')	
		for chunk in f.chunks():
			f.write(chunk)
		f.close()

	# se llama a la tarea de celery
	# para que se ejecute asincronicamente
	task = import_vector_layer.delay(temp_dir,vectorlayer_name);
	# se retorna el id task
	result["error"] = None
	result["task_id"] = task.id;
	return result;
